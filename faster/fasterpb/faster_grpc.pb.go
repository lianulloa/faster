// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fasterpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FasterServiceClient is the client API for FasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FasterServiceClient interface {
	//Unary with deadline
	InferNetworkSpeed(ctx context.Context, in *InferNetworkSpeedRequest, opts ...grpc.CallOption) (*InferNetworkSpeedResponse, error)
}

type fasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFasterServiceClient(cc grpc.ClientConnInterface) FasterServiceClient {
	return &fasterServiceClient{cc}
}

func (c *fasterServiceClient) InferNetworkSpeed(ctx context.Context, in *InferNetworkSpeedRequest, opts ...grpc.CallOption) (*InferNetworkSpeedResponse, error) {
	out := new(InferNetworkSpeedResponse)
	err := c.cc.Invoke(ctx, "/faster.FasterService/InferNetworkSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FasterServiceServer is the server API for FasterService service.
// All implementations must embed UnimplementedFasterServiceServer
// for forward compatibility
type FasterServiceServer interface {
	//Unary with deadline
	InferNetworkSpeed(context.Context, *InferNetworkSpeedRequest) (*InferNetworkSpeedResponse, error)
	mustEmbedUnimplementedFasterServiceServer()
}

// UnimplementedFasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFasterServiceServer struct {
}

func (UnimplementedFasterServiceServer) InferNetworkSpeed(context.Context, *InferNetworkSpeedRequest) (*InferNetworkSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InferNetworkSpeed not implemented")
}
func (UnimplementedFasterServiceServer) mustEmbedUnimplementedFasterServiceServer() {}

// UnsafeFasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FasterServiceServer will
// result in compilation errors.
type UnsafeFasterServiceServer interface {
	mustEmbedUnimplementedFasterServiceServer()
}

func RegisterFasterServiceServer(s grpc.ServiceRegistrar, srv FasterServiceServer) {
	s.RegisterService(&FasterService_ServiceDesc, srv)
}

func _FasterService_InferNetworkSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferNetworkSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FasterServiceServer).InferNetworkSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faster.FasterService/InferNetworkSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FasterServiceServer).InferNetworkSpeed(ctx, req.(*InferNetworkSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FasterService_ServiceDesc is the grpc.ServiceDesc for FasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faster.FasterService",
	HandlerType: (*FasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InferNetworkSpeed",
			Handler:    _FasterService_InferNetworkSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faster/fasterpb/faster.proto",
}
